{
	"info": {
		"_postman_id": "81be8ac1-4bf1-44c7-b2dd-27c488c94764",
		"name": "RedRiverServer Documentation",
		"description": "# RedRiver Server API\n\nThis is documentation concerning the api endpoints for the ASP.NET Core 2 api implementation of the RedRiver Application.\n\nThe ASP.NET backend is stateless and as such there are no \"logged in\" or \"logged out\" users as such. Authentication/authorisation is carried out by JWT tokens which have a limited life span.\n\n## Registration and Login flow.\n\nA user must first register through the **api/account/register** api endpoint. No \"login\" i.e. token generation is performed at this point. If the user registers correctly (i.e. a 200 code is received) the user can then apply for a token from the **api/account/login** endpoint. If a token is created, this can then be included as a bearer token in all subsequent api request for authorisation/authenication.\n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Account Routes   ",
			"description": "All routes under /account exist to affect accounts e.g. register, add, delete etc.    \nAll routes return 200 upon success, and varying codes upon failure depending on cause.",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "beedfb53-a959-4338-a962-495b5aa53d1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"testuser\",\n\t\"email\": \"testuser@hotmail.com\",\n\t\"password\": \"123!@thHHh\"\n}\n"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/account/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"account",
								"register"
							]
						},
						"description": "Allows user to register themselves. A successful registration does **not** login the user i.e. no token is created here. In the event of two-factor registration confirmation email/sms must first be processed for user to be reigstered."
					},
					"response": []
				},
				{
					"name": "LogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d12541-f78c-436e-8141-9bfb8437bade",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData = pm.response.json();",
									"pm.environment.set(\"token\",jsonData.token );",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"testuser\",\n\t\"email\": \"testuser@hotmail.com\",\n\t\"password\": \"123!@thHHh\"\n}"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/account/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"account",
								"login"
							]
						},
						"description": "Allows user to login i.e. generate a JWT token which is then used for authentication and authorization. Token is then returned."
					},
					"response": []
				},
				{
					"name": "LogOut",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d12541-f78c-436e-8141-9bfb8437bade",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData = pm.response.json();",
									"pm.environment.set(\"token\",jsonData.token );",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"testuser\",\n\t\"email\": \"testuser@hotmail.com\",\n\t\"password\": \"123!@thHHh\"\n}"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/account/logout",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"account",
								"logout"
							]
						},
						"description": "Allows user to logout."
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "beedfb53-a959-4338-a962-495b5aa53d1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"testuser\",\n\t\"email\": \"testuser@hotmail.com\",\n\t\"password\": \"123!@thHHh\"\n}\n"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/account/deleteuser",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"account",
								"deleteuser"
							]
						},
						"description": "Allows deletion of user. User must have admin or superuser status. \n"
					},
					"response": []
				},
				{
					"name": "Add user to role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86bfe7b7-7f92-4e84-93ba-3e4a96e208a7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"testuser@hotmail.com\",\n\t\"rolename\" : \"admin\"\n}\n"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/account/addusertorole",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"account",
								"addusertorole"
							]
						},
						"description": "Allows promotion of user to admin or superuser status. *This is primarily for test purposes and should be removed in production.*  \nNote that user must ask for new token after change in role."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7cd580a0-5cc1-4ad4-aaa8-44f9d2ed3709",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "629318c2-9113-44aa-ae7d-b0d8d651c20f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Routes",
			"description": "All routes under /user exist to implement user functionality e.g. user gets info on her/himself, user adds friend, user deletes friend, update user information etc.       \nAll routes here require a bearer jwt auth token in header - this is used as authorization but also authentication (i.e. this is user \"testuser1\", so no further user authentication is required in the body.   \nThese routes are only called by regular users (or admins/superuser requiring information about themselves). Admins will use other routes to get info on users etc.     \n",
			"item": [
				{
					"name": "Get User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "beedfb53-a959-4338-a962-495b5aa53d1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"testuser\",\n\t\"email\": \"testuser@hotmail.com\",\n\t\"password\": \"123!@thHHh\"\n}\n"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/user/getuserinfo",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"user",
								"getuserinfo"
							]
						},
						"description": "Allows user to fetch info about themselves. Returns JSON formatted user model from server.  \n** TODO ** Remove sensitive info?"
					},
					"response": []
				},
				{
					"name": "Add Friend",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d12541-f78c-436e-8141-9bfb8437bade",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"jsonData = pm.response.json();",
									"pm.environment.set(\"token\",jsonData.token );",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"testuser2\"\n}"
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/user/addfriend",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"user",
								"addfriend"
							]
						},
						"description": "Allows user to add friend. Friend's username is required."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7cd580a0-5cc1-4ad4-aaa8-44f9d2ed3709",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "629318c2-9113-44aa-ae7d-b0d8d651c20f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Test Routes",
			"description": "These routes exist solely to test the functionality of access levels. \nAll routes return 200 upon success, 403 upon lack of authorization, and various other failure codes.",
			"item": [
				{
					"name": "Unprotected example route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60f6ca4b-c1f9-4d56-a162-3bc4261b726a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/routetest/tryunprotectedroute",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"routetest",
								"tryunprotectedroute"
							]
						},
						"description": "Route shold be available to all access levels, even non-users."
					},
					"response": []
				},
				{
					"name": "Protected (user) example route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e402cb3-6054-4fd2-a1a2-99dd50b63660",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/routetest/tryprotectedroute",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"routetest",
								"tryprotectedroute"
							]
						},
						"description": "Route requires a *user* authorized by a JWT token transmitted in the bearer head attribute.  "
					},
					"response": []
				},
				{
					"name": "Protected(admin) route request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e402cb3-6054-4fd2-a1a2-99dd50b63660",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/routetest/tryprotectedrouteadmin",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"routetest",
								"tryprotectedrouteadmin"
							]
						},
						"description": "Route requires an *admin* authorized by a JWT token transmitted in the bearer head attribute.  "
					},
					"response": []
				},
				{
					"name": "Protected(superuser) route request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e402cb3-6054-4fd2-a1a2-99dd50b63660",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/routetest/tryprotectedroutesuperuser",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"routetest",
								"tryprotectedroutesuperuser"
							]
						},
						"description": "Route requires an *superuser* authorized by a JWT token transmitted in the bearer head attribute.  "
					},
					"response": []
				},
				{
					"name": "Protected(admin or superuser) route request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e402cb3-6054-4fd2-a1a2-99dd50b63660",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/api/routetest/tryprotectedroutesuperuseroradmin",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"routetest",
								"tryprotectedroutesuperuseroradmin"
							]
						},
						"description": "Route requires an *admin OR superuser* authorized by a JWT token transmitted in the bearer head attribute.  "
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "43ca7185-407c-433c-8aa0-2adfa6d0bdaa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "db6b137d-b9eb-4a4a-859b-4680f2034920",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "75f30120-44eb-489a-b780-5499734b9d29",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4b1b1d53-bb70-41eb-9b90-f0116dec644f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}